{
	"info": {
		"_postman_id": "9deddf57-a441-4edb-a631-4075dafa64e7",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24159525"
	},
	"item": [
		{
			"name": "Adding Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header should have application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Response body should be an object\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response body should have the correct property and value\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    \r",
							"    pm.expect(responseJSON).to.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Response body data should have noteId property and its value shouldn't be null\", () => {\r",
							"    const { data } = pm.response.json();\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"test\", \"try\"],\r\n    \"body\": \"Ini isi catatan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header should have application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be an object\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have the correct property and value\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"    \r",
							"    pm.expect(responseJSON).to.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data should have notes property and its value should be an array and at least must have 1 element\", () => {\r",
							"    const { data } = pm.response.json();\r",
							"\r",
							"    pm.expect(data).to.ownProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header should have application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be an object\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property and value\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"    \r",
							"    pm.expect(responseJSON).to.ownProperty('data');\r",
							"    pm.expect(responseJSON.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data should contain note object\", () => {\r",
							"    const { data } = pm.response.json();\r",
							"\r",
							"    pm.expect(data).to.ownProperty('note');\r",
							"    pm.expect(data.note).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data.note object should have correct value for id, title, tags, and body\", () => {\r",
							"    const { data: { note } } = pm.response.json();\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = \"Catatan A\";\r",
							"    const expectedTags = [\"test\", \"try\"];\r",
							"    const expectedBody = \"Ini isi catatan\";\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"    \r",
							"    pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.equals(expectedBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header should have application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be an object\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property and value\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"    \r",
							"    pm.expect(responseJSON).to.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test(\"When request the updated note\", () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('Then the updated note should contain the latest data', () => {\r",
							"                const { data: { note } } = response.json();\r",
							"\r",
							"                const expectedTitle = \"Catatan A Revised\";\r",
							"                const expectedTags = [\"test\", \"try\"];\r",
							"                const expectedBody = \"Ini isi catatan revised\";\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"test\", \"try\"],\r\n    \"body\": \"Ini isi catatan revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header should have application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be an object\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"    pm.expect(responseJSON).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should have correct property and value\", () => {\r",
							"    const responseJSON = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJSON).to.ownProperty('status');\r",
							"    pm.expect(responseJSON.status).to.equals('success');\r",
							"    \r",
							"    pm.expect(responseJSON).to.ownProperty('message');\r",
							"    pm.expect(responseJSON.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test(\"When request the deleted note\", () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('Then the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"\r",
							"                const responseJSON = response.json();\r",
							"                pm.expect(responseJSON.status).to.equals('fail');\r",
							"                pm.expect(responseJSON.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}